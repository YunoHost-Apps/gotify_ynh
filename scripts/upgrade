#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading settings.." --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get $app domain)
path_url=$(ynh_app_setting_get $app path)
admin=$(ynh_app_setting_get $app admin)
is_public=$(ynh_app_setting_get $app is_public)
final_path=$(ynh_app_setting_get $app final_path)
db_name=$(ynh_app_setting_get $app db_name)
db_pwd=$(ynh_app_setting_get $app mysqlpwd)
port=$(ynh_app_setting_get $app port)
password=$(ynh_app_setting_get $app password)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility.." --weight=1

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set $app is_public 1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set $app is_public 0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z $db_name ]; then
	db_name=$(ynh_sanitize_dbid $app)
	ynh_app_setting_set $app db_name $db_name
fi

# If final_path doesn't exist, create it
if [ -z $final_path ]; then
	final_path=/opt/yunohost/$app
	ynh_app_setting_set $app final_path $final_path
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=30

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path $path_url)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Upgrading source files..." --weight=6

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path" $architecture

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading nginx web server configuration..." --weight=2

# Create a dedicated nginx config
if [ "$path_url" != "/" ]
then
	ynh_replace_string "^#sub_path_only" "" "../conf/nginx.conf"
fi

ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=2

# Create a dedicated user (if not existing)
ynh_system_user_create $app

#=================================================
# SPECIFIC UPGRADE
#=================================================

### Verify the checksum of a file, stored by `ynh_store_file_checksum` in the install script.
### And create a backup of this file if the checksum is different. So the file will be backed up if the admin had modified it.
ynh_backup_if_checksum_is_different "$final_path/config.yml"

cp ../conf/config.yml "$final_path/config.yml"
ynh_replace_string "__APP__" $app "$final_path/config.yml"
ynh_replace_string "__PORT__" $port "$final_path/config.yml"
ynh_replace_string "__DBNAME__" $db_name "$final_path/config.yml"
ynh_replace_string "__DBPASS__" $db_pwd "$final_path/config.yml"
ynh_replace_string "__ADMINUSER__" $admin "$final_path/config.yml"
ynh_replace_string "__ADMINPASS__" $password "$final_path/config.yml"
ynh_replace_string "__DOMAIN__" $domain "$final_path/config.yml"

# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum "$final_path/config.yml"

#=================================================
# SETUP SYSTEMD
#=================================================

# Create a dedicated systemd config
ynh_replace_string "__ARCHITECTURE__" $architecture "../conf/systemd.service"
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R root:$app $final_path/
chown -R $app: $final_path/data/
chmod o-rwx $final_path/ -R

# If data directory doesn't exists
if [ -z $final_path/data ]; then
	mkdir $final_path/data
fi

# check data directory permission
chown -R $app: $final_path/data

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring SSOwat..." --weight=1

unprotected_uris=$(ynh_app_setting_get --app=$app --key=unprotected_uris)
if [ ! -z "$unprotected_uris" ]; then
    ynh_app_setting_delete --app=$app --key=unprotected_uris
fi

ynh_permission_update --permission "main" --add visitors

#=================================================
# RELOAD SERVICE
#=================================================
ynh_script_progression --message="Reloading service..." --weight=1

systemctl restart $app

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --weight=1

systemctl reload nginx

ynh_script_progression --message="Upgrade of $app completed" --last